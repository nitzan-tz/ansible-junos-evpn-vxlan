/* This block of configuration has been generated by the role overlay-evpn-qfx-l3 for Ansible */

protocols {
    bgp {
{# Configure BGP Peers for EVPN using iBGP #}
        group OVERLAY_EVPN {
            type internal;
            family evpn {
                signaling;
            }
            local-as {{ overlay.local.asn }};
            local-address {{ loopback_ip }};
            multipath;
{% for neighbor in overlay.neighbors %}
            neighbor {{neighbor}};
{% endfor %}
{% if overlay.local.cluster is defined %}
            cluster {{ overlay.local.cluster }};
{% endif %}
        }
        bfd-liveness-detection {
            minimum-interval {{ overlay.bfd.min_interval }};
            multiplier {{ overlay.bfd.multiplier }};
            session-mode {{ overlay.bfd.mode }};
        }
{# If Device is configured as Route Reflector #}
{% if overlay.local.cluster is defined %}
        group OVERLAY_EVPN_RR {
            type internal;
            family evpn signaling;
            local-as {{ overlay.local.asn }};
            local-address {{ loopback_ip }};
            multipath;
{% for neighbor in overlay.rr_bgp %}
            neighbor {{ neighbor }};
{% endfor %}
        }
{% endif %}
    }
}

protocols {
    evpn {
        encapsulation vxlan;
        extended-vni-list [ {% for name, tenant in overlay.tenants.iteritems() %}{% for bd in tenant.bridge_domains %} {{ bd.vni_id }} {% endfor %}{% endfor %} ];
        multicast-mode ingress-replication;
        vni-options {
{% for name, tenant in overlay.tenants.iteritems() %}
{% for bd in tenant.bridge_domains %}
            vni {{ bd.vni_id }} {
                vrf-target export target:1:{{ bd.vni_id }};
            }
{% endfor %}
{% endfor %}
        }
    }
}

routing-options {
    router-id {{ loopback_ip }};
    forwarding-table {
        ecmp-fast-reroute;
    }
}

{# Configure L3 VRF per tenant #}
routing-instances {
{% for name, tenant in overlay.tenants.iteritems() %}
    {{ name }} {
        instance-type vrf;
        interface lo0.{{tenant.id}};
 {% for bd in tenant.bridge_domains %}
  {% if bd.local_ip is defined %}
        interface irb.{{ bd.vlan_id }};
  {% endif %}
 {% endfor %}
        route-distinguisher {{ loopback_ip }}:{{tenant.id}};
        vrf-target target:10:{{tenant.id}};
 {% if tenant.import_tenants is defined %}
        vrf-import VRF_IMPORT_{{ name }};
 {% endif %}		
 {% if tenant.static_route is defined or tenant.import_tenants is defined %}
        routing-options {
  {% if tenant.static_route is defined %}		
            static {
   {% for route in tenant.static_route %}
                route {{route.route}} next-hop {{route.next_hop}};
   {% endfor %}
            }
  {% endif %}
  {% if tenant.import_tenants is defined %}
           auto-export;
  {% endif %}		
        }
 {% endif %}
    }
{% endfor %}
}


interfaces {
{# Configuration for Anycast Gateway #}
    irb {
{% for name, tenant in overlay.tenants.iteritems() %}
{% for bd in tenant.bridge_domains %}
{% if bd.local_ip is defined %}
        unit {{ bd.vlan_id }} {
            proxy-macip-advertisement;
            description " * TENANT {{tenant.id}} - vlan {{bd.vlan_id}} - vni {{bd.vni_id}} {%if bd.description is defined %}{{bd.description}}{% endif %}"
            family inet {
                address {{ bd.local_ip }}/{{ bd.mask }} {
                    virtual-gateway-address {{ bd.vip_ip }};
                }
{% if bd.input_filter is defined or bd.output_filter is defined%}
                filter {
{% if bd.input_filter is defined%}
                    input {{bd.input_filter}};
{% endif %}
{% if bd.output_filter is defined%}
                    output {{bd.output_filter}};
{% endif %}
                }
{% endif %}
            }
        }
{% endif %}
{% endfor %}
{% endfor %}
    }
{# Configuration for Anycast Gateway #}
{% for name, tenant in overlay.tenants.iteritems() %}
    lo0 {
        unit {{tenant.id}} {
            family inet {
			filter {
				input ROUTER_PROTECT;
            }
                address {{ tenant.lo0_ip }}/32;
            }
        }
    }
{% endfor %}
}

switch-options {
    vtep-source-interface lo0.0;
    vrf-import LEAF_IN;
    vrf-target target:9999:9999;
    route-distinguisher {{ loopback_ip }}:1;
}

policy-options {
{% for name, tenant in overlay.tenants.iteritems() %}
 {% if tenant.import_tenants is defined %}
   policy-statement VRF_IMPORT_{{ name }} {
  {% for import_tenant in tenant.import_tenants %}
       term IMPORT_VRF_{{import_tenant.name}} {                   
           from community COM_VRF_{{import_tenant.name}};
           then accept;                
       }  
  {% endfor %}	   
   }
  {% for import_tenant in tenant.import_tenants %}
   community COM_VRF_{{import_tenant.name}} members target:10:{{import_tenant.id}};
  {% endfor %}
 {% endif %}
{% endfor %}
     policy-statement LEAF_IN {
{% for name, tenant in overlay.tenants.iteritems() %}
{% for bd in tenant.bridge_domains %}
        term IMPORT_VNI_{{ bd.vni_id }} {
            from community COMM_{{ bd.vni_id }};
            then accept;
        }
{% endfor %}
{% endfor %}
        term IMPORT_LEAF_ESI {
            from community COMM_LEAF_ESI;
            then accept;
        }
        term DEFAULT {
            then reject;
        }
    }
    community COMM_LEAF_ESI members target:9999:9999;
{% for name, tenant in overlay.tenants.iteritems() %}
{% for bd in tenant.bridge_domains %}
    community COMM_{{ bd.vni_id }} members target:1:{{ bd.vni_id }};
{% endfor %}
{% endfor %}
}

vlans {
{% for name, tenant in overlay.tenants.iteritems() %}
{% for bd in tenant.bridge_domains %}
    BD{{ bd.vni_id }} {
        vlan-id {{ bd.vlan_id }};
{% if bd.local_ip is defined %}
        l3-interface irb.{{ bd.vlan_id }};
{% endif %}
        vxlan {
            vni {{ bd.vni_id }};
            ingress-node-replication;
        }
    }
{% endfor %}
{% endfor %}
}
